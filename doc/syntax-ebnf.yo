redef(or)(0)(bf(|))
redef(left)(2)(                                            \
    whenman(NOTRANS(.IP) "ARG1 bf(=) ARG2")                \
    whenhtml(htmltag(dt)(1)ARG1 bf(=) ARG2 htmltag(dt)(0)) \
)
redef(right)(1)(                                     \
    whenman(nl()or() ARG1)                           \
    whenhtml(htmltag(dd)(1)or() ARG1 htmltag(dd)(0)) \
)
redef(end)(0)(htmltag(p)(1))

This is an informal specification in the EBNF metalanguage.  If this
doesn't make sense, please see the discussion and examples in the later
sections.

htmltag(dl)(1)
left(config)(line config)
right(empty)
end()
left(line)(option q(;))
right(context)
right(functiondef q(;))
right(binding q(;))
right(unbinding q(;))
end()
left(option)(option-name q(=) type)
right(option-name q(is!) type)
end()
left(option-name)(q(DisplayTitlebar))
right(q(FocusPolicy))
right(....)
end()
left(type)(boolean)
right(integer)
right(string)
right(enumeration)
end()
left(boolean)(q(True) or() q(False))
end()
whenhtml(NOTRANS(...<p> ))
roffcmd(.IP)(NOTRANS(\...))()()
left(context)(context-option context-name type q({) config q(}))
end()
left(context-option)(q(Not) or() q(TransientFor) or() q(HasTransient))
end()
left(context-name)(q(IsShaped) or() q(WindowName) or() ....)
end()
left(function-def)(q(Define) string q({) function-list q(}))
end()
left(function-list)(function q(;) function-list)
right(function q(;))
end()
left(function)(function-name q(CHAR(40)) arglist q(CHAR(41)))
end()
left(function-name)(q(Launch) or() q(Quit) or() q(Invoke) or() ....)
end()
left(arglist)(arglist q(,) type)
right(type)
end()
left(binding)(q(BindKey) string function)
right(q(BindKeyRelease) string function)
right(q(BindButton) location string function)
right(q(BindDrag) location string function)
end()
left(unbinding)(q(UnBindKey) string)
right(q(UnBindKeyRelease) string)
right(q(UnBindButton) location string)
right(q(UnBindDrag) location string)
end()
left(location)(q(TitleBar) or() q(Frame))
end()
htmltag(dl)(0)
