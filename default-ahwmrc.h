/* generated by ./make-xwmrc-include.pl - do not edit */
#ifndef ahwmrc_76213
#define ahwmrc_76213

char *default_ahwmrc[] = {
"# Default AHWM configuration file",
"# This file is created whenever AHWM starts and does not find",
"# a configuration file.",
"# You can use this file as a template to build your own.",
"",
"# the bottom of the file contains a list of selectors, options and",
"# functions for quick reference (search for QUICK REFERENCE)",
"",
"# Comments are shell-script-style,",
"// C++-style",
"/* or C-style */",
"",
"# Keybindings",
"",
"# the modifiers you can use are",
"# control, alt, shift, hyper, super, meta, mod1...mod5",
"# the modifiers are case-insensitive",
"# the non-modifier keys that go with the modifiers can be found",
"# in your /usr/X11R6/include/keysymdef.h file, or by running",
"# the standard X program \"xev\" and typing into the window",
"# the non-modifier keys are CASE-SENSITIVE",
"# (this is the only thing in this file which is case-sensitive)",
"# CapsLock, ScrollLock, etc. are ignored when reading keystrokes.",
"",
"BindKey \"Control | Alt | Shift | t\" Launch(\"xterm\");",
"BindKey \"Control | Alt | Shift | n\" Launch(\"netscape\");",
"BindKey \"Control | Alt | Shift | e\" Launch(\"emacs\");",
"BindKey \"Control | Alt | Shift | f\" Launch(\"xmms -f\");",
"BindKey \"Control | Alt | Shift | z\" Launch(\"xmms -r\");",
"",
"# Argument for Launch() is passed through /bin/sh:",
"",
"BindKey \"Control | Alt | Shift | k\" Launch(\"konqueror > /dev/null 2>&1\");",
"",
"# mutes/unmutes sound in case of phone, door, etc.",
"",
"BindKey \"Control | Alt | Shift | Return\" Launch(\"sound-toggle\");",
"",
"# resets b0rked sound card on my laptop",
"",
"BindKey \"Control | Alt | Shift | space\" Launch(\"xmms -u ; xmms -u\");",
"",
"# strings can contain (some) C-style escape sequences",
"",
"BindKey \"Alt | F4\" Launch(\"xmessage \\\"This isn't windows, fool\\\"\");",
"",
"# can never have too many ways to kill programs",
"# also, this is how to bind to argument-less functions",
"",
"BindKey \"Control | Alt | Shift | x\" Launch(\"xkill\");",
"BindKey \"Control | Alt | Escape\" KillNicely();",
"BindKey \"Control | Alt | Shift | Escape\" KillWithExtremePrejudice();",
"",
"# While moving or resizing, you can use the arrow keys and the keys w,",
"# a, s, d.  Use Shift with one of those keys to move to an edge or",
"# resize in larger increments.  Hit Enter to accept the move/resize,",
"# hit Escape to cancel it, hit Control to toggle between a move and a",
"# resize, and hit Space during a resize to constrain the direction.",
"",
"BindKey \"Control | Alt | Shift | m\" MoveInteractively();",
"BindKey \"Control | Alt | Shift | r\" ResizeInteractively();",
"",
"# Sun X server doesn't grok this key combination, throws me off",
"",
"BindKey \"Control | Alt | BackSpace\" Quit();",
"",
"# The Restart() function will completely restart AHWM.  You",
"# can use this if you change this file while running AHWM,",
"# The process should be completely transparent - all your",
"# windows should remain in the same position and workspace, etc.",
"",
"BindKey \"Control | Alt | Shift | r\" Restart();",
"",
"# The CycleNext() and CyclePrevious() functions simulate an action",
"# similar to that of Microsoft Windows's \"alt-tab\" action: windows",
"# are maintained on a stack and these functions walk up and down",
"# the stack (see the man pages for more details).  You will not",
"# be able to use the keyboard for anything else until you let go",
"# of all modifier keys.  See also \"CycleBehaviour\".",
"# NB:  this function must be bound to a keystroke, not a mouse click.",
"",
"BindKey \"Alt | Tab\" CycleNext();",
"BindKey \"Alt | Shift | Tab\" CyclePrevious();",
"",
"# this is how to bind to functions with one argument",
"",
"BindKey \"Control | Alt | 7\" SendToWorkspace(7);",
"BindKey \"Control | Alt | 6\" SendToWorkspace(6);",
"BindKey \"Control | Alt | 5\" SendToWorkspace(5);",
"BindKey \"Control | Alt | 4\" SendToWorkspace(4);",
"BindKey \"Control | Alt | 3\" SendToWorkspace(3);",
"BindKey \"Control | Alt | 2\" SendToWorkspace(2);",
"BindKey \"Control | Alt | 1\" SendToWorkspace(1);",
"",
"# the 'Quote()' function should be bound to a",
"# key release in order to work correctly",
"# (otherwise the key depress will invoke quote()",
"# and the key release will be quoted).",
"",
"BindKeyRelease \"Control | Alt | Shift | q\" Quote();",
"",
"# Binding to button clicks is similar to binding to keys, but you have",
"# to specify the location for the click.  The location is one of",
"# \"Titlebar\" or \"Frame\".  You can use the same modifiers as",
"# with BindKey and the buttons are Button1 through Button5:",
"# Button1 = left button, Button2 = middle button, Button3 = right",
"# button, Button4 = wheel up, Button5 = wheel down",
"",
"BindButton Titlebar \"Button3\" Maximize();",
"BindButton Titlebar \"Button2\" KillNicely();",
"BindButton Titlebar \"Control | Button2\" KillWithExtremePrejudice();",
"",
"# We have to bind drags to both Frame and Titlebar in order to",
"# work everywhere in a window - this may be changed sometime in",
"# the future; it's not very intuitive.",
"",
"BindDrag Frame \"Alt | Button1\" MoveInteractively();",
"BindDrag Titlebar \"Alt | Button1\" MoveInteractively();",
"BindDrag Frame \"Alt | Button3\" ResizeInteractively();",
"BindDrag Titlebar \"Alt | Button3\" ResizeInteractively();",
"",
"# Sometimes you may want to bind more than one function",
"# to the same action.  To do this, you need to define",
"# your own function and use the \"Invoke()\" function.",
"# Here's an example:",
"",
"Define \"Focus-and-Move\" {",
"    Focus();",
"    MoveInteractively();",
"}",
"BindDrag Titlebar \"Button1\" Invoke(\"Focus-and-Move\");",
"",
"# I like to have the root background indicate",
"# the current workspace, so I do this:",
"",
"Define \"f1\" {",
"    Launch(\"xsetroot -solid \\\"#404040\\\"\");",
"    GotoWorkspace(1);",
"}",
"BindKey \"Alt | 1\" Invoke(\"f1\");",
"Define \"f2\" {",
"    Launch(\"xsetroot -solid \\\"#2F4F4F\\\"\");",
"    GotoWorkspace(2);",
"}",
"BindKey \"Alt | 2\" Invoke(\"f2\");",
"Define \"f3\" {",
"    Launch(\"xsetroot -solid \\\"#000050\\\"\");",
"    GotoWorkspace(3);",
"}",
"BindKey \"Alt | 3\" Invoke(\"f3\");",
"Define \"f4\" {",
"    Launch(\"xsetroot -solid \\\"#500000\\\"\");",
"    GotoWorkspace(4);",
"}",
"BindKey \"Alt | 4\" Invoke(\"f4\");",
"Define \"f5\" {",
"    Launch(\"xsetroot -solid \\\"#500050\\\"\");",
"    GotoWorkspace(5);",
"}",
"BindKey \"Alt | 5\" Invoke(\"f5\");",
"Define \"f6\" {",
"    Launch(\"xsetroot -solid \\\"#005000\\\"\");",
"    GotoWorkspace(6);",
"}",
"BindKey \"Alt | 6\" Invoke(\"f6\");",
"Define \"f7\" {",
"    Launch(\"xsetroot -solid \\\"#101010\\\"\");",
"    GotoWorkspace(7);",
"}",
"BindKey \"Alt | 7\" Invoke(\"f7\");",
"",
"# You cannot use the \"Define\" keyword within a context (the",
"# definition will be ignored if you do so).",
"#",
"# Defining recursive functions is allowed, but you should be",
"# very careful if you choose to do so.  Consider the following:",
"# ",
"# Define \"foo\" {",
"#     Invoke(\"foo\");",
"# }",
"# BindKey \"Alt | r\" Invoke(\"foo\");",
"#",
"# Question:  what happens when you press Alt+r?",
"# Answer:  \"foo\" will be invoked thousands of times",
"# until you blow the stack and AHWM will segfault.",
"# This is not a bug: if you want to shoot yourself",
"# in the foot, I won't second-guess you.",
"",
"# now set option values",
"# these set the defaults (which may be overridden below)",
"",
"DisplayTitlebar = True;",
"FocusPolicy = SloppyFocus;",
"RaiseDelay = 350;",
"PassFocusClick = True;",
"TitlePosition = DisplayLeft;",
"KeepTransientsOnTop = True;",
"TitlebarFont = \"-*-helvetica-bold-r-*-*-12-*-*-*-*-*-*-*\";",
"",
"# The height of the titlebar is determined by the font you choose.",
"# If you would like a larger font, I might suggest this one:",
"# TitlebarFont = \"-adobe-times-*-r-*-*-*-180-*-*-*-*-*-*\";",
"",
"# NumberOfWorkspaces is special in that it cannot be put into a",
"# context like all the other options (it only applies globally)",
"",
"NumberOfWorkspaces = 7;",
"",
"# this is how to override defaults",
"",
"IsShaped True {",
"    DisplayTitlebar = False;",
"}",
"WindowInstance \"oclock\" {",
"    # DisplayTitlebar = False; /* not needed, above applies */",
"    FocusPolicy = DontFocus;",
"    Omnipresent = True;",
"    AlwaysOnTop = True;",
"}",
"WindowClass \"xmms\" {",
"    # DisplayTitlebar = False; /* not needed, xmms sets motif hint */",
"    FocusPolicy = ClickToFocus;",
"}",
"",
"# XMMS has a plugin which does not set any",
"# hints and does not even set instance/class",
"",
"WindowName \"OpenGL Spectrum analyzer\" {",
"    DisplayTitlebar = False;",
"    FocusPolicy = DontFocus;",
"}",
"",
"# A somewhat more complex example - workspace 7 usually holds an xmms",
"# invocation, but occasionally will have an xterm.  I want xmms focused",
"# almost all of the time.",
"",
"InWorkspace 7 {",
"    # Use \"*\" for window name/class/instance to match all windows",
"    WindowClass \"*\" {",
"        CycleBehaviour = SkipCycle;",
"        FocusPolicy = ClickToFocus;",
"        DisplayTitlebar = False;",
"    }",
"    WindowClass \"xmms\" {",
"        CycleBehaviour = RaiseImmediately;",
"    }",
"}",
"",
"# The above example could be done in a number of ways; for example,",
"# this is equivalent:",
"# InWorkspace 7 {",
"#     CycleBehaviour = SkipCycle;",
"#     FocusPolicy = ClickToFocus;",
"#     WindowClass \"xmms\" {",
"#         CycleBehaviour = RaiseImmediately;",
"#     }",
"# }",
"",
"# I usually use workspace 1 for most of my editing - emacs's mouse-avoid",
"# mode interacts poorly with sloppy focus and the workspace only holds",
"# two full-screen windows anyway.",
"",
"InWorkspace 1 {",
"    FocusPolicy = ClickToFocus;",
"}",
"",
"# I use colors to identify the current workspace at a glance:",
"",
"ColorTitlebarText = \"#D8D8D8\";",
"ColorTitlebarTextFocused = \"#E0E0E0\";",
"InWorkspace 1 {",
"    ColorTitlebar = \"#282828\";",
"    ColorTitlebarFocused = \"#404040\";",
"}",
"InWorkspace 2 {",
"    ColorTitlebar = \"#193939\";",
"    ColorTitlebarFocused = \"#2F4F4F\";",
"}",
"InWorkspace 3 {",
"    ColorTitlebar = \"#000038\";",
"    ColorTitlebarFocused = \"#000050\";",
"}",
"InWorkspace 4 {",
"    ColorTitlebar = \"#380000\";",
"    ColorTitlebarFocused = \"#500000\";",
"}",
"InWorkspace 5 {",
"    ColorTitlebar = \"#380038\";",
"    ColorTitlebarFocused = \"#500050\";",
"}",
"InWorkspace 6 {",
"    ColorTitlebar = \"#003800\";",
"    ColorTitlebarFocused = \"#005000\";",
"}",
"InWorkspace 7 {",
"    ColorTitlebar = \"#000000\";",
"    ColorTitlebarFocused = \"#101010\";",
"}",
"",
"# All of the options set above may be overridden by the application,",
"# if the application uses hints.  For example, \"oclock\" is the only",
"# application that we specifically made omnipresent, but \"kicker\"",
"# (the KDE taskbar) sets a hint which tells AHWM to make \"kicker\"",
"# omnipresent.  This hint overrides the default (user-specified)",
"# value of not-omnipresent.  To make an option apply regardless",
"# of whatever hints the application sets, you can use \"is!\" instead",
"# of \"=\" when setting the option.  The \"is!\" keyword should",
"# be used in very few cases (when you don't like the hint a",
"# specific application sets or you don't like AHWM's interpretation",
"# of a certain hint).",
"#",
"# This makes the KDE taskbar appear in only one workspace.",
"# FIXME:  use something else as an example and leave kicker alone",
"",
"WindowInstance \"kicker\" {",
"    Omnipresent is! False;",
"}",
"",
"# \"kpager\" (the KDE pager) sets a hint to be Sticky.  However,",
"# \"kpager\" does not remember its position or size and will sometimes",
"# start up with an odd position or size.  This re-enables moving",
"# and resizing:",
"",
"WindowInstance \"kpager\" {",
"    Sticky is! False;",
"}",
"",
"# QUICK REFERENCE",
"# these can also be found in the man page",
"#",
"# Selectors:",
"#",
"# IsShaped (boolean)      - is window shaped?",
"# InWorkspace (integer)   - is window in workspace n?",
"# WindowName (string)     - is window's name s?",
"# WindowClass (string)    - is window's Class s?",
"# WindowInstance (string) - is window's Instance s?",
"# Not (context)           - invert yes/no status of next context selector",
"# TransientFor (context)  - is window transient for next context selector?",
"# HasTransient (context)  - does window have a transient",
"#                           for which next context applies?",
"#",
"# Options:",
"#",
"# AlwaysOnBottom (boolean)          - below all other clients?",
"# AlwaysOnTop (boolean)             - on top of all other clients?",
"# ColorTitlebar (string)            - an X color, ie \"#FF0000\" or \"red\"",
"# ColorTitlebarFocused (string)     - titlebar color when window is focused",
"# ColorTitlebarText (string)        - color of window's title",
"# ColorTitlebarTextFocused (string) - window title color when focused",
"# CycleBehavior (enumeration)       - one of:",
"#               { SkipCycle, RaiseImmediately, RaiseOnCycleFinish, DontRaise }",
"# DefaultWorkspace (integer)        - use zero for current workspace",
"# DisplayTitlebar (boolean)         - add a titlebar?",
"# DontBindMouse (boolean)           - do not apply mouse bindings",
"# DontBindKeys (boolean)            - do not apply key bindings",
"# FocusPolicy (enumeration)         - one of:",
"#             { ClickToFocus, SloppyFocus, DontFocus }",
"# KeepTransientsOnTop (boolean)     - app's dialogs stay on top of app?",
"# NumberOfWorkspaces (integer)      - must be > 0, only global",
"# Omnipresent (boolean)             - display in all workspaces?",
"# PassFocusClick (boolean)          - pass focusing click for ClickToFocus?",
"# RaiseDelay (integer)              - milliseconds before raise with SloppyFocus",
"# Sticky (boolean)                  - do not allow moving or resizing",
"# TitlebarFont (string)             - X font name, only global",
"# TitlePosition (enumeration)       - one of:",
"#               { DisplayLeft, DisplayRight, DisplayCentered, DontDisplay, }",
"# ",
"#",
"# Functions:",
"#",
"# CycleNext (void)                 - like Windows' alt-tab",
"# CyclePrevious (void)             - like Windows' alt-shift-tab",
"# Focus (void)                     - use with ClickToFocus, see example above",
"# GotoWorkspace (integer)          - make workspace n current workspace",
"# Invoke (string)                  - please see example",
"# KillNicely (void)                - ask window to close itself",
"# KillWithExtremePrejudice (void)  - use XKillClient(3)",
"# Launch (string)                  - pass string to /bin/sh",
"# Maximize (void)                  - toggle maximization state",
"# MaximizeHorizontally (void)      - toggle horizontal maximization state",
"# MaximizeVertically (void)        - toggle vertical maximization state",
"# MoveInteractively (void)         - move with keyboard/mouse",
"# MoveResize (string)              - non-interactive, use X geometry string",
"# Nop (void)                       - do nothing (but do grab click/keystroke)",
"# Quit (void)                      - exit ahwm",
"# Quote (void)                     - please see example above",
"# ResizeInteractively (void)       - resize with keyboard/mouse",
"# Restart (void)                   - restart AHWM, re-reading config file",
"# SendToWorkspace (integer)        - send current window to workspace n",
};
#define DEFAULT_AHWMRC_NLINES 390

#endif
